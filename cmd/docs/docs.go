// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/clients/count": {
            "post": {
                "description": "Retrieve a count of users based on the provided query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Count clients",
                "parameters": [
                    {
                        "description": "comment",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/count.Params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Кол-во пользователей",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/clients/list": {
            "post": {
                "description": "Retrieve a list of clients based on the provided query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "List clients",
                "parameters": [
                    {
                        "description": "comment",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/list.Params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Client"
                            }
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/groups": {
            "post": {
                "description": "Create a new group with the provided request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Create a new group",
                "parameters": [
                    {
                        "description": "Group Name",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create.Params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Group"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/groups/list": {
            "post": {
                "description": "Retrieve a list of groups based on the provided body parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "List groups",
                "parameters": [
                    {
                        "description": "comment",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/list.Params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Group"
                            }
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with the provided request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "library.UserProperties  object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/library.UserProperties"
                        }
                    },
                    {
                        "type": "boolean",
                        "description": "No Cache",
                        "name": "NoCache",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/count": {
            "post": {
                "description": "Retrieve a count of users based on the provided query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Count users",
                "parameters": [
                    {
                        "description": "comment",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/count.Params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Кол-во пользователей",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/list": {
            "post": {
                "description": "Retrieve a list of users based on the provided query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "description": "comment",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/list.Params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Fetch a user by their unique ID with an option to bypass cache.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get User by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "No cache (default: false)",
                        "name": "X-No-Cache",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/read.Response"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a specific user based on the provided user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update.Params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/update.Response"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user with the specified ID.",
                "consumes": [
                    "*/*"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users_bulk/create": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create tariffs for specific endpoint",
                "parameters": [
                    {
                        "description": "User properties",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bulk_create.Params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users_bulk/update": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Create tariffs for specific endpoint",
                "parameters": [
                    {
                        "description": "User properties",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bulk_update.Params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "bulk_create.Params": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/library.UserProperties"
                    }
                }
            }
        },
        "bulk_update.Params": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/library.UserProperties"
                    }
                }
            }
        },
        "count.Params": {
            "description": "count endpoint params",
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "created_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "created_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "deleted_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "deleted_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sources_multi_pass": {
                    "type": "boolean",
                    "default": false
                },
                "updated_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "updated_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                }
            }
        },
        "create.Params": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sources_multi_pass": {
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "library.UserProperties": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sources_multi_pass": {
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "list.Params": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "created_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "created_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "deleted_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "deleted_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "page_num": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 10
                },
                "sources_multi_pass": {
                    "type": "boolean",
                    "default": false
                },
                "updated_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "updated_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                }
            }
        },
        "models.Client": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "group_name": {
                    "type": "string"
                },
                "is_dev": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "models.Group": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "created_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "created_at": {
                    "type": "string"
                },
                "created_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "deleted_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "deleted_at": {
                    "type": "string"
                },
                "deleted_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sources_multi_pass": {
                    "type": "boolean",
                    "default": false
                },
                "updated_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                }
            }
        },
        "read.Response": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sources_multi_pass": {
                    "type": "boolean",
                    "default": false
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "update.Params": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sources_multi_pass": {
                    "type": "boolean"
                }
            }
        },
        "update.Response": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "created_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "created_at": {
                    "type": "string"
                },
                "created_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "deleted_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "deleted_at": {
                    "type": "string"
                },
                "deleted_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sources_multi_pass": {
                    "type": "boolean",
                    "default": false
                },
                "updated_after": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_before": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/",
	Schemes:          []string{},
	Title:            "Swagger API",
	Description:      "Swagger API for some api.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
